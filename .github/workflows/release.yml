name: release
on:
  release:
    types: [published]
jobs:
  publish:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        python-version: ["3.8", "3.9", "3.10", "3.11", "3.12"]
        # Linux builds don't need to run across different Python versions,
        # they will all be installed under the manylinux action
        exclude:
          - os: ubuntu-latest
            python-version: "3.8"
          - os: ubuntu-latest
            python-version: "3.9"
          - os: ubuntu-latest
            python-version: "3.10"
          - os: ubuntu-latest
            python-version: "3.11"
          - os: ubuntu-latest
            python-version: "3.12"
        # Use the latest Python version as a base for Linux builds
        include:
          - os: ubuntu-latest
            python-version: "3.x"
    steps:
      - uses: actions/checkout@v4
        with:
          # LFS is not needed for releases
          lfs: false
          submodules: true
          # Tags are needed to compute the current version number
          fetch-depth: 0
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
      - name: Install tox and pypa-build
        run: |
          pip install --upgrade pip
          pip install tox build
      - name: Build sdist
        # Do this before the manylinux build, so the output directory doesn't get created by Docker
        if: ${{ matrix.os == 'ubuntu-latest' }}
        run: |
          pyproject-build --sdist
      - name: Build wheels
        uses: pypa/cibuildwheel@v2.16.2
        env:
          CIBW_SKIP: "pp* *musllinux*" # skips pypy and musllinux

      - name: Move wheels to dist folder
        run: |
           mv wheelhouse/*.whl dist

      - name: Build non-Linux wheels
        if: ${{ matrix.os != 'ubuntu-latest' }}
        run: |
          pyproject-build --wheel
      - name: Publish to PyPI
        env:
          TWINE_USERNAME: "__token__"
          TWINE_PASSWORD: ${{ secrets.PYPI_TOKEN }}
          TWINE_NON_INTERACTIVE: "true"
        run: |
          tox -e release
